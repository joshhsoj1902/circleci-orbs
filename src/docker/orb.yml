version: 2.1

description: |
  Build and publish Docker images to container registries
examples:
  custom_name_and_tag:
    description: I'll add examples at some point. Till then, look at https://github.com/joshhsoj1902/linuxgsm-docker/blob/master/.circleci/config.yml or https://github.com/joshhsoj1902/docker-gogpagent/blob/master/.circleci/config.yml..
    usage:
      version: 2.1

      orbs:
        docker-publish: joshhsoj1902/docker@0.1.0

      workflows:
        build_and_publish_docker_image:
          jobs:
            - docker-publish/publish:
                image: my/image
                tag: my_tag

executors:
  docker:
    description: The docker container to use when running docker-publish builds
    docker:
      - image: joshhsoj1902/circleci-build-image:1.0.8

commands:
  configure-gcloud:
    description: Configure and sign into GCP
    parameters:
    steps:
      - run:
          command: | 
            gcloud components update 
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project $GCLOUD_PROJECT
            gcloud auth configure-docker

  check:
    description: |
      Sanity check to make sure you can build a docker image.
        * check that $DOCKER_LOGIN and $DOCKER_PASSWORD environment variables are set
        * run docker login to ensure that you can push the built image
    parameters:
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
    steps:
      - run:
          name: Check Environment Variables
          command: |
            if [[ -z "${DOCKER_LOGIN}" ]]; then
              echo "DOCKER_LOGIN is not set, will not be able to push image."
              exit 1
            fi
            if [[ -z "${DOCKER_PASSWORD}" ]]; then
              echo "DOCKER_PASSWORD is not set, will not be able to push image."
              exit 1
            fi
      - run:
          name: Docker Login
          command: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD << parameters.registry >>
  build:
    description: Builds and Tags a Docker Image.
    parameters:
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile in working directory.
        type: string
        default: Dockerfile
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
      workspace:
        description: Name of workspace to save to.
        type: string
        default: /tmp/works
      imageFile:
        description: Name of file to save image as.
        type: string
        default: images.tar
    steps:
      - run:
          name: Build Docker Image
          command: docker build -f << parameters.dockerfile >> -t << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> .
      - run: mkdir -p << parameters.workspace >>
      - run: docker save << parameters.registry >>/<< parameters.image >> -o << parameters.workspace >>/<< parameters.imageFile >>
      - persist_to_workspace:
          root: << parameters.workspace >>
          paths: 
            - << parameters.imageFile >>
  
  compose-exec-retry:
    description: |
      Runs a command inside an already running docker-compose container until the command returns truthy
      * This is great for testing that a service comes up healthy
    parameters:
      composeFilePath:
        description: Full path to compose file.
        type: string
        default: ./docker-compose.yml
      service:
        description: Service inside compose file to exec into.
        type: string
        default: test
      command:
        description: Command to run.
        type: string
        default: date
      tries:
        description: How many times to retry.
        type: integer
        default: 60
      sleep:
        description: How long to sleep between retrys.
        type: integer
        default: 5
    steps:
      - run:
          command: | 
            retry -v -s << parameters.sleep >> -t << parameters.tries >> 'docker-compose -f << parameters.composeFilePath >> exec << parameters.service >> "<< parameters.command >>"'

  test-container-healthiness:
    description: |
      Tests that a particular docker container is healthy
    parameters:
      composeFilePath:
        description: Full path to compose file.
        type: string
        default: ./docker-compose.yml
      container:
        description: Container to test. (This must be pretty unique, if the container matches any other running docker container this test fails)
        type: string
      tries:
        description: How many times to retry.
        type: integer
        default: 60
      sleep:
        description: How long to sleep between retrys.
        type: integer
        default: 5
    steps:
      - run:
          command: |
            retry -v -s << parameters.sleep >> -t << parameters.tries >> -- 'containerId=$(docker ps -f name=_<< parameters.container >>_ --format "{{.ID}}"); if [ $(docker inspect --format "{{ .State.Health.Status }}" $containerId) == "healthy" ]; then echo "Service Healthy"; true; else echo "Service not healthy $containerId"; false; fi'
            docker ps

  deploy:
    description: Deploy docker image to a registry.
    parameters:
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME
      tag:
        description: tag of image to push.
        type: string
        default: latest
    steps:
      - run:
          name: Push Docker Image
          command: docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>

  deploy-as:
    description: Deploy docker image to a registry. tagging it as something elase first
    parameters:
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME
      tag:
        description: tag of image loaded from disk.
        type: string
        default: latest
      tag_as:
        description: tag of image to push.
        type: string
    steps:
      - run:
          name: Push Docker Image
          command: |
            docker tag << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> << parameters.registry >>/<< parameters.image >>:<< parameters.tag_as >>
            docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag_as >>

jobs:
  build:
    description: Check, Build, and Deploy a Docker Image.
    executor: docker
    parameters:
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile in working directory.
        type: string
        default: Dockerfile
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
      after_checkout:
        description: Optional steps to run after checking out the code.
        type: steps
        default: []
      before_build:
        description: Optional steps to run before building the docker image.
        type: steps
        default: []
      after_build:
        description: Optional steps to run after building the docker image.
        type: steps
        default: []
    steps:
      - checkout
      - when:
          name: Run after_checkout lifecycle hook steps.
          condition: << parameters.after_checkout >>
          steps: << parameters.after_checkout >>
      - setup_remote_docker
      - when:
          name: Run before_build lifecycle hook steps.
          condition: << parameters.before_build >>
          steps: << parameters.before_build >>
      - build:
          dockerfile: << parameters.dockerfile >>
          image: << parameters.image >>
          tag: << parameters.tag >>
          registry: << parameters.registry >>
      - when:
          name: Run after_build lifecycle hook steps.
          condition: << parameters.after_build >>
          steps: << parameters.after_build >>

  test:
    description: Runs a test that requires docker
    executor: docker
    parameters:
      workspace:
        description: Name of workspace to save to.
        type: string
        default: /tmp/workspace
      imageFile:
        description: Name of file to save image as.
        type: string
        default: images.tar
      command:
        description: Command to run.
        type: string
        default: make test
      before_load:
        description: Optional steps to run before loading the docker image.
        type: steps
        default: []
      before_test:
        description: Optional steps to run before running the tests.
        type: steps
        default: []
      after_test:
        description: Optional steps to run after running the tests.
        type: steps
        default: []
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: << parameters.workspace >>
      - when:
          name: Run before_load lifecycle hook steps.
          condition: << parameters.before_load >>
          steps: << parameters.before_load >>
      - run: docker load -i << parameters.workspace >>/<< parameters.imageFile >>
      - when:
          name: Run before_test lifecycle hook steps.
          condition: << parameters.before_test >>
          steps: << parameters.before_test >>
      - run: 
          command: |
            cd << parameters.workspace >>
            << parameters.command >>
      - when:
          name: Run after_test lifecycle hook steps.
          condition: << parameters.after_test >>
          steps: << parameters.after_test >>

  container-health:
    description: Test all containers are healthy.
    executor: docker
    parameters:
      workspace:
        description: Name of workspace to save to.
        type: string
        default: /tmp/workspace
      imageFile:
        description: Name of file to save image as.
        type: string
        default: images.tar
      composeFile:
        description: Name of compose file to use.
        type: string
        default: ./docker-compose.yml
      service:
        description: Name of the service to test
        type: string
      command:
        description: Command to run to start containers.
        type: string
        default: docker-compose -f /tmp/workspace/docker-compose.yml up
      commandBackground:
        description: Should start command be ran in background?
        type: boolean
        default: true
      before_load:
        description: Optional steps to run before loading the docker image.
        type: steps
        default: []
      before_test:
        description: Optional steps to run before running the tests.
        type: steps
        default: []
      after_test:
        description: Optional steps to run after running the tests.
        type: steps
        default: []
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: << parameters.workspace >>
      - when:
          name: Run before_load lifecycle hook steps.
          condition: << parameters.before_load >>
          steps: << parameters.before_load >>
      - run: docker load -i << parameters.workspace >>/<< parameters.imageFile >>
      - run: 
          background: << parameters.commandBackground>>
          command: | 
            cd << parameters.workspace >>
            << parameters.command >>
      - when:
          name: Run before_test lifecycle hook steps.
          condition: << parameters.before_test >>
          steps: << parameters.before_test >>  
      - test-container-healthiness:
          composeFilePath: << parameters.workspace >>/<< parameters.composeFile >>
          container: << parameters.service >>
          sleep: 5
          tries: 60
      - when:
          name: Run after_test lifecycle hook steps.
          condition: << parameters.after_test >>
          steps: << parameters.after_test >>

  compose-test-health:
    description: Check, Build, and Deploy a Docker Image.
    executor: docker
    parameters:
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      workspace:
        description: Name of workspace to save to.
        type: string
        default: /tmp/workspace
      imageFile:
        description: Name of file to save image as.
        type: string
        default: images.tar
      composeFile:
        description: Name of compose file to use.
        type: string
        default: ./docker-compose.yml
      service:
        description: Name of service to run/exec.
        type: string
        default: ./docker-compose.yml
      before_load:
        description: Optional steps to run before loading the docker image.
        type: steps
        default: []
      before_test:
        description: Optional steps to run before running the tests.
        type: steps
        default: []
      after_test:
        description: Optional steps to run after running the tests.
        type: steps
        default: []
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: << parameters.workspace >>
      - when:
          name: Run before_load lifecycle hook steps.
          condition: << parameters.before_load >>
          steps: << parameters.before_load >>
      - run: docker load -i << parameters.workspace >>/<< parameters.imageFile >>
      - run: 
          background: true
          command: | 
            docker image ls

            docker-compose -f << parameters.workspace >>/<< parameters.composeFile >> up
      - when:
          name: Run before_test lifecycle hook steps.
          condition: << parameters.before_test >>
          steps: << parameters.before_test >>
      - compose-exec-retry:
          composeFilePath: << parameters.workspace >>/<< parameters.composeFile >>
          service: << parameters.service >>
          command: ./docker-ready.sh
          sleep: 5
          tries: 60
      - compose-exec-retry:
          composeFilePath: << parameters.workspace >>/<< parameters.composeFile >>
          service: << parameters.service >>
          command: ./docker-health.sh
          sleep: 120
          tries: 3
      - when:
          name: Run after_test lifecycle hook steps.
          condition: << parameters.after_test >>
          steps: << parameters.after_test >>
      - run:
          name: Save logs -f << parameters.workspace >>/<< parameters.composeFile >>
          when: always
          command: docker-compose -f << parameters.workspace >>/<< parameters.composeFile >> logs << parameters.service >>

  publish:
    description: Publish a Docker Image.
    executor: docker
    parameters:
      workspace:
        description: Name of workspace to save to.
        type: string
        default: /tmp/workspace
      imageFile:
        description: Name of file to save image as.
        type: string
        default: images.tar
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME
      tag:
        description: tag of image loaded from disk.
        type: string
        default: latest
      tag_as1:
        description: First value to tag and push image as. Defaults to latest.
        type: string
        default: latest
      tag_as2:
        description: Second value to tag and push image as. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      tag_as3:
        description: Third value to tag and push image as.
        type: string
        default: $CIRCLE_BRANCH
      tag_as4:
        description: 4th value to tag and push image as.
        type: string
        default: $CIRCLE_BRANCH-$CIRCLE_BUILD_NUM
      tag_as5:
        description: Optional fifth value to tag and push image as.
        type: string
        default: $TAG_AS5
      tag_as5_bool:
        description: Enable Optional fifth value to tag and push image as.
        type: boolean
        default: false
      tag_as6:
        description: Optional sixth value to tag and push image as.
        type: string
        default: $TAG_AS6
      tag_as6_bool:
        description: Enable Optional sixth value to tag and push image as.
        type: boolean
        default: false
      tag_as7:
        description: Optional 7th value to tag and push image as.
        type: string
        default: $TAG_AS7
      tag_as7_bool:
        description: Enable Optional 7th value to tag and push image as.
        type: boolean
        default: false
      tag_as8:
        description: Optional 8th value to tag and push image as.
        type: string
        default: $TAG_AS8
      tag_as8_bool:
        description: Enable Optional 8th value to tag and push image as.
        type: boolean
        default: false
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
      before_load:
        description: Optional steps to run before loading the docker image.
        type: steps
        default: []
      before_deploy:
        description: Optional steps to run before deploying the docker image. 
        type: steps
        default: []
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: << parameters.workspace >>
      - when:
          name: Run before_load lifecycle hook steps.
          condition: << parameters.before_load >>
          steps: << parameters.before_load >>
      - run: docker load -i << parameters.workspace >>/<< parameters.imageFile >>
      - when:
          name: Run before_deploy lifecycle hook steps.
          condition: << parameters.before_deploy >>
          steps: << parameters.before_deploy >>
      - run: |
           if [[ -f << parameters.workspace >>/env-vars >> ]]; then
             cat << parameters.workspace >>/env-vars >> $BASH_ENV
           fi
      - deploy-as:
          registry: << parameters.registry >>
          image: << parameters.image >>
          tag: << parameters.tag >>
          tag_as: << parameters.tag_as1 >>
      - deploy-as:
          registry: << parameters.registry >>
          image: << parameters.image >>
          tag: << parameters.tag >>
          tag_as: << parameters.tag_as2 >>
      - deploy-as:
          registry: << parameters.registry >>
          image: << parameters.image >>
          tag: << parameters.tag >>
          tag_as: << parameters.tag_as3 >>
      - deploy-as:
          registry: << parameters.registry >>
          image: << parameters.image >>
          tag: << parameters.tag >>
          tag_as: << parameters.tag_as4 >>
      - when:
          name: Tag 5.
          condition: << parameters.tag_as5_bool >>
          steps: 
            - deploy-as:
                registry: << parameters.registry >>
                image: << parameters.image >>
                tag: << parameters.tag >>
                tag_as: << parameters.tag_as5 >>
      - when:
          name: Tag 6.
          condition: << parameters.tag_as6_bool >>
          steps: 
            - deploy-as:
                registry: << parameters.registry >>
                image: << parameters.image >>
                tag: << parameters.tag >>
                tag_as: << parameters.tag_as6 >>
      - when:
          name: Tag 7.
          condition: << parameters.tag_as7_bool >>
          steps: 
            - deploy-as:
                registry: << parameters.registry >>
                image: << parameters.image >>
                tag: << parameters.tag >>
                tag_as: << parameters.tag_as7 >>
      - when:
          name: Tag 8.
          condition: << parameters.tag_as8_bool >>
          steps: 
            - deploy-as:
                registry: << parameters.registry >>
                image: << parameters.image >>
                tag: << parameters.tag >>
                tag_as: << parameters.tag_as8 >>
